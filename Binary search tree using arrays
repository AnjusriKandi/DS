#include <stdio.h>
#define MAX_SIZE 100
int tree[MAX_SIZE];

// Function to initialize the tree
void initializeTree() {
    for (int i = 0; i < MAX_SIZE; i++) {
        tree[i] = -1; // Assuming -1 represents an empty node
    }
}

// Function to insert a value into the tree
void insert(int value, int index) {
    if (tree[index] == -1) {
        tree[index] = value;
    } else if (value < tree[index]) {
        insert(value, 2 * index + 1); // Go to the left subtree
    } else {
        insert(value, 2 * index + 2); // Go to the right subtree
    }
}

// Function to perform inorder traversal
void inorder(int index) {
    if (tree[index] != -1) {
        inorder(2 * index + 1);
        printf("%d ", tree[index]);
        inorder(2 * index + 2);
    }
}

// Function to perform preorder traversal
void preorder(int index) {
    if (tree[index] != -1) {
        printf("%d ", tree[index]);
        preorder(2 * index + 1);
        preorder(2 * index + 2);
    }
}

// Function to perform postorder traversal
void postorder(int index) {
    if (tree[index] != -1) {
        postorder(2 * index + 1);
        postorder(2 * index + 2);
        printf("%d ", tree[index]);
    }
}

// Function to perform level order traversal
void levelorder(int height) {
    for (int i = 0; i <= height; i++) {
        printLevel(i, 0);
    }
}

// Helper function to print nodes at a given level
void printLevel(int level, int index) {
    if (index < MAX_SIZE && tree[index] != -1) {
        if (level == 0) {
            printf("%d ", tree[index]);
        } else {
            printLevel(level - 1, 2 * index + 1);
            printLevel(level - 1, 2 * index + 2);
        }
    }
}

// Function to calculate the height of the tree
int height(int index) {
    if (tree[index] == -1) {
        return -1;
    } else {
        int leftHeight = height(2 * index + 1);
        int rightHeight = height(2 * index + 2);
        return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
    }
}

// Function to find the minimum value in the tree
int findMin(int index) {
    while (tree[2 * index + 1] != -1) {
        index = 2 * index + 1;
    }
    return tree[index];
}

// Function to find the maximum value in the tree
int findMax(int index) {
    while (tree[2 * index + 2] != -1) {
        index = 2 * index + 2;
    }
    return tree[index];
}

// Function to search for a value in the tree
int search(int value, int index) {
    if (tree[index] == -1) {
        return 0; // Value not found
    } else if (tree[index] == value) {
        return 1; // Value found
    } else if (value < tree[index]) {
        return search(value, 2 * index + 1); // Search in the left subtree
    } else {
        return search(value, 2 * index + 2); // Search in the right subtree
    }
}

int main() {
    initializeTree();

    // Insert values into the tree
    int values[] = {50, 30, 70, 20, 40, 60, 80};
    for (int i = 0; i < sizeof(values) / sizeof(values[0]); i++) {
        insert(values[i], 0);
    }

    // Perform traversals
    printf("Inorder: ");
    inorder(0);
    printf("\n");

    printf("Preorder: ");
    preorder(0);
    printf("\n");

    printf("Postorder: ");
    postorder(0);
    printf("\n");

    printf("Level order: ");
    int treeHeight = height(0);
    levelorder(treeHeight);
    printf("\n");

    // Display height of the tree
    printf("Height of the tree: %d\n", treeHeight);

    // Find min and max values
    printf("Minimum value: %d\n", findMin(0));
    printf("Maximum value: %d\n", findMax(0));

    // Search for a value
    int searchValue = 40;
    if (search(searchValue, 0)) {
        printf("%d found in the tree.\n", searchValue);
    } else {
        printf("%d not found in the tree.\n", searchValue);
    }

    return 0;
}
