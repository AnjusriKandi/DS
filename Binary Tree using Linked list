#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>
#include<limits.h>

struct node{
    int data;
    struct node *left;
    struct node *right;
};

struct node *root = NULL;

struct node* createNode(int data){
    struct node *newNode = (struct node*)malloc(sizeof(struct node));
    newNode->data = data;
    newNode->left = NULL;
    newNode->right = NULL;

    return newNode;
}

struct queue {
    int front, rear, size;
    struct node* *arr;
};

struct queue* createQueue() {
    struct queue* newQueue = (struct queue*)malloc(sizeof(struct queue));

    newQueue->front = -1;
    newQueue->rear = 0;
    newQueue->size = 0;

    newQueue->arr = (struct node**)malloc(100 * sizeof(struct node*));

    return newQueue;
}

void enqueue(struct queue* queue, struct node *temp) {
    queue->arr[queue->rear++] = temp;
    queue->size++;
}

struct node *dequeue(struct queue* queue) {
    queue->size--;
    return queue->arr[++queue->front];
}

void insertNode(int data) {
    struct node *newNode = createNode(data);

    if(root == NULL){
        root = newNode;
        return;
    }
    else {
        struct queue* queue = createQueue();
        enqueue(queue, root);

        while(true) {
            struct node *node = dequeue(queue);

            if(node->left != NULL && node->right != NULL) {
                enqueue(queue, node->left);
                enqueue(queue, node->right);
            }
            else {
                if(node->left == NULL) {
                    node->left = newNode;
                    enqueue(queue, node->left);
                }
                else {
                    node->right = newNode;
                    enqueue(queue, node->right);
                }
                break;
            }
        }
    }
}

void inorderTraversal(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        if(node->left != NULL)
            inorderTraversal(node->left);
        printf("%d ", node->data);
        if(node->right != NULL)
            inorderTraversal(node->right);
    }
}

void preorderTraversal(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        printf("%d ", node->data);
        if(node->left != NULL)
            preorderTraversal(node->left);
        if(node->right != NULL)
            preorderTraversal(node->right);
    }
}

void postorderTraversal(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        if(node->left != NULL)
            postorderTraversal(node->left);
        if(node->right != NULL)
            postorderTraversal(node->right);
        printf("%d ", node->data);
    }
}

void levelorderTraversal(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        struct queue* queue = createQueue();
        enqueue(queue, root);

        while(queue->size > 0) {
            struct node *current = dequeue(queue);
            printf("%d ", current->data);

            if(current->left != NULL)
                enqueue(queue, current->left);
            if(current->right != NULL)
                enqueue(queue, current->right);
        }
    }
}

void printLeafNodes(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        if (node == NULL)
            return;
        if (node->left == NULL && node->right == NULL)
            printf("%d ", node->data);
        else {
            printLeafNodes(node->left);
            printLeafNodes(node->right);
        }
    }
}

int findMax(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return -1;
    }
    else {
        if(node == NULL)
            return INT_MIN;
        int max = node->data;
        int leftMax = findMax(node->left);
        int rightMax = findMax(node->right);

        if (leftMax > max)
            max = leftMax;
        if (rightMax > max)
            max = rightMax;

        return max;
    }
}

int findMin(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return -1;
    }
    else {
        if(node == NULL)
            return INT_MAX;
        int min = node->data;
        int leftMin = findMin(node->left);
        int rightMin = findMin(node->right);

        if (leftMin < min)
            min = leftMin;
        if (rightMin < min)
            min = rightMin;

        return min;
    }
}

bool searchElement(struct node *node, int target) {
    if(root == NULL){
        printf("Tree is empty\n");
        return false;
    }
    else {
        if (node == NULL)
            return false;
        if (node->data == target)
            return true;
        return searchElement(node->left, target) || searchElement(node->right, target);
    }
}

int getHeight(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return -1;
    }
    else {
        if(node == NULL)
            return -1;
        int leftHeight = getHeight(node->left);
        int rightHeight = getHeight(node->right);
        return 1 + (leftHeight > rightHeight ? leftHeight : rightHeight);
    }
}

void getBreadth(struct node *node, int height, int *breadth) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        if(node == NULL)
            return;

        if(height == 0)
            (*breadth)++;
        else {
            getBreadth(node->left, height - 1, breadth);
            getBreadth(node->right, height - 1, breadth);
        }
    }
}

void breadthOfEachNode(struct node *node) {
    if(root == NULL){
        printf("Tree is empty\n");
        return;
    }
    else {
        int height = getHeight(node);
        for (int i = 0; i <= height; i++) {
            int breadth = 0;
            getBreadth(node, i, &breadth);
            printf("Node at height %d: %d\n", i, breadth);
        }
    }
}

struct node* deleteNode(struct node* root, int key) {
    if(root == NULL)
        return root;

    if(key < root->data)
        root->left = deleteNode(root->left, key);
    else if(key > root->data)
        root->right = deleteNode(root->right, key);
    else {
        if(root->left == NULL) {
            struct node *temp = root->right;
            free(root);
            return temp;
        }
        else if(root->right == NULL) {
            struct node *temp = root->left;
            free(root);
            return temp;
        }

        struct node* temp = root->right;
        while(temp && temp->left != NULL)
            temp = temp->left;

        root->data = temp->data;
        root->right = deleteNode(root->right, temp->data);
    }
    return root;
}

int main(){
    int choice, value;

    printf("\n----- Binary Tree -----\n");
    while(1){
        printf("\n***** MENU *****\n");
        printf("1. Insert\n2. Display Inorder\n3. Display Preorder\n4. Display Postorder\n");
        printf("5. Display Levelorder\n6. Print Leaf Nodes\n7. Find Max\n8. Find Min\n");
        printf("9. Search Element\n10. Print Height\n11. Print Breadth of Each Node\n");
        printf("12. Delete Node\n13. Exit\n");
        printf("Enter your choice: ");
        scanf("%d",&choice);

        switch(choice){
            case 1:
                printf("\nEnter the value to be insert: ");
                scanf("%d", &value);
                insertNode(value);
                break;
            case 2:
                printf("\nInorder Traversal: ");
                inorderTraversal(root);
                break;
            case 3:
                printf("\nPreorder Traversal: ");
                preorderTraversal(root);
                break;
            case 4:
                printf("\nPostorder Traversal: ");
                postorderTraversal(root);
                break;
            case 5:
                printf("\nLevelorder Traversal: ");
                levelorderTraversal(root);
                break;
            case 6:
                printf("\nLeaf Nodes: ");
                printLeafNodes(root);
                break;
            case 7:
                printf("\nMax Element: %d", findMax(root));
                break;
            case 8:
                printf("\nMin Element: %d", findMin(root));
                break;
            case 9:
                printf("\nEnter element to be searched: ");
                scanf("%d", &value);
                if (searchElement(root, value))
                    printf("Element found in the tree.\n");
                else
                    printf("Element not found in the tree.\n");
                break;
            case 10:
                printf("\nHeight of the Tree: %d", getHeight(root));
                break;
            case 11:
                breadthOfEachNode(root);
                break;
            case 12:
                printf("\nEnter the value to be deleted: ");
                scanf("%d", &value);
                root = deleteNode(root, value);
                break;
            case 13:
                exit(0);
            default:
                printf("\nPlease select correct operations!!!\n");
        }
    }

    return 0;
}
